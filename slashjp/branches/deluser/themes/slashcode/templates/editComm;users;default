__section__
default
__description__
Edit comment preferences

* title = passed to titlebar
* user_edit = hashref of preferences
* h_check = boolean to check h?  hardthresh
* r_check = boolean to check r?  reparent
* n_check = boolean to check n?  noscores
* s_check = boolean to check s?  nosigs
* commentmodes_select = popup for comment modes
* commentsort_select = popup for comment sort
* highlightthresh_select = popup for highlight threshold
* uthreshold_select = popup for threshold
* posttype_select = popup for post type


__title__

__page__
users
__lang__
en_US
__name__
editComm
__template__
[% orig_title = title %]
<div id="slashboxes">
[% UNLESS user.lowbandwidth %]
[% PROCESS userboxes %]
[% END %]
</div>
[% title = orig_title %]
<div id="users-blocks">
[% PROCESS prefs_titlebar tab_selected='comments' %]
<div class="generalbody">

[% note %]

[% admin_block %]

<form action="[% env.script_name %]" method="post">
<fieldset>
<legend>Comment Settings</legend>
[% PROCESS formkey_tag %]

<input type="hidden" name="formname"  value="editcomm">
<input type="hidden" name="op" value="savecomm">
<input type="hidden" name="uid" value="[% user_edit.uid %]">

<table width="100%">
	<tr>
		<td valign="middle">
        	<p><b>Discussion Style</b><p>
		<blockquote><div>
        	<input type="radio" name="discussion2" value="none"[% constants.markup_checked_attribute IF !user_edit.discussion2 || (user_edit.discussion2 && user_edit.discussion2 != "uofm" && user_edit.discussion2 != "slashdot") %]> Slashdot Classic Discussion System<br>
		[% IF user.is_admin || user.acl.discussion2_uofm %]
        	<input type="radio" name="discussion2" value="uofm"[% constants.markup_checked_attribute IF user_edit.discussion2 == "uofm" %]> University of Michigan Testing<br>
		[% END %]
        	<input type="radio" name="discussion2" value="slashdot"[% constants.markup_checked_attribute IF user_edit.discussion2 == "slashdot" %]> Slashdot Interactive Discussion System (a.k.a. D2)<br>
		</div></blockquote>

		[% IF user_edit.discussion2 && user_edit.discussion2 == "slashdot" %]
		<blockquote><div>
		How Many Comments
		[% comment_q_name = ( Slash.isSubscriber(user_edit) || (user_edit.seclev >= 100) ) ? 'd2_comment_q_all' : 'd2_comment_q';
		   comment_q = Slash.db.getDescriptions(comment_q_name);
		   Slash.createSelect('d2_comment_q', comment_q, user_edit.d2_comment_q, 1) %]<br>

		Comment Retrieval Order
		[% comment_order = Slash.db.getDescriptions('d2_comment_order');
		   comment_order_def = user_edit.d2_comment_order || 0;
		   Slash.createSelect('d2_comment_order', comment_order, comment_order_def, 1) %]
		</div></blockquote>
		[% END %]

        	<p><b>Email Display</b>
		(currently
		[%- IF !user_edit.fakeemail; " not displayed";
		ELSE; ": <tt>"; user_edit.fakeemail | strip_literal; "</tt>";
		END %])<br>
		[% IF !user_edit.emaildisplay.defined;
			IF user_edit.fakeemail %]
			<i>(Your current email address was apparently set before
			users' email addresses were forced to one of the below
			choices. Please pick one and click Save.)</i><br>
			[% END;
			user_edit.emaildisplay = 0;
		END;
		IF user_edit.emaildisplay.defined;
			emaildisplay.${user_edit.emaildisplay} = constants.markup_checked_attribute;
		END %]
		<blockquote><div>
		<input type="radio" name="emaildisplay" [% emaildisplay.0 %] value=0> Do not display an e-mail address.<br>
                <input type="radio" name="emaildisplay" [% emaildisplay.1 %] value=1> Show your email address with random SPAM-armoring applied.<br>
		[% PROCESS formNote note='This changes weekly' %]
                <input type="radio" name="emaildisplay" [% emaildisplay.2 %] value=2> Show your real email address without cowering behind childish anonymity or obfuscation.
		</div></blockquote>
		<label>Disable Sigs
		<input type="checkbox" name="nosigs"[% s_check %]>
		</label>
		[% PROCESS formNote note='Strip sig quotes from comments' %]

		[% IF user.is_admin %]
		<label>Disable Spellchecker <input type="checkbox" name="no_spell"[% nospell_check %]></label>
		[% END %]

		<label>Display Mode [% commentmodes_select %]</label>

		<label>Sort Order [% commentsort_select %]</label>

		<label>Threshold [% uthreshold_select %]</label>
		<div class="notes">
			Comments scored less than this setting will be ignored.  Anonymous posts start at 0, logged in posts start at 1.  Moderators add and subtract points according to the <a href="[% gSkin.rootdir %]/moderation.shtml">Guidelines</a>
		</div>

		<label>Highlight Threshold [% highlightthresh_select %]</label>
		[% PROCESS formNote note='Comments scoring this are displayed even after an article spills into index mode' %]

		<label>Hard Thresholds
		<input type="checkbox" name="hardthresh"[% h_check %]></label>
		[% PROCESS formNote note="Hides 'X Replies Below Current Threshold' Message from Threads" %]

		<label>Reparent Highly Rated Comments
		<input type="checkbox" name="reparent"[% r_check %]></label>
		[% PROCESS formNote note="Causes comments to be displayed even if they are replies to comments under current threshold" %]

		<label>Do Not Display Scores
		<input type="checkbox" name="noscores"[% n_check %]></label>
		[% PROCESS formNote note="Hides score: They still <b>apply</b> you just don't see them." %]

		[%# XXX this needs to be flexible for sites that
		    already have different reasons, in the code.  why
		    not just loop over the reasons already existing,
		    like it did before?
		 %]

[% IF constants.m1 %]
		<p><b><a name="reason_bonus">Reason Modifier</a></b> (assign a modifier to different moderation reasons)<br>
		<table>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Insightful			</td>
				<td>	[% reason_select.Insightful %]	</td>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Offtopic			</td>
				<td>	[% reason_select.Offtopic %]	</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Interesting			</td>
				<td>	[% reason_select.Interesting %]	</td>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Flamebait			</td>
				<td>	[% reason_select.Flamebait %]	</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Funny				</td>
				<td>	[% reason_select.Funny %]	</td>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Troll				</td>
				<td>	[% reason_select.Troll %]	</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Informative			</td>
				<td>	[% reason_select.Informative %]	</td>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	Redundant			</td>
				<td>	[% reason_select.Redundant %]	</td>
			</tr>
		</table>
[% END %]

		<p><b>People Modifier</b> (assign a modifier to different people)<br>
		<table>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	
				<a name="people_bonus_friend">Friend</a>
			<img src="[% constants.imagedir %]/friend.gif" alt="friend">				</td>
				<td>	[% people_select.friend %]	</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	<a name="people_bonus_fan">Fan</a> <img src="[% constants.imagedir %]/fan.gif" alt="fan">				</td>
				<td>	[% people_select.fan %]		</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	<a name="people_bonus_foe">Foe</a> <img src="[% constants.imagedir %]/foe.gif" alt="foe">				</td>
				<td>	[% people_select.foe %]		</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	<a name="people_bonus_freak">Freak</a> <img src="[% constants.imagedir %]/freak.gif" alt="freak">				</td>
				<td>	[% people_select.freak %]		</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	<a name="people_bonus_fan">Friends of Friends</a> <img src="[% constants.imagedir %]/fof.gif" alt="fof">				</td>
				<td>	[% people_select.fof %]		</td>
			</tr>
			<tr>
				<td>	&nbsp; &nbsp; &nbsp;		</td>
				<td>	<a name="people_bonus_eof">Foes of Friends</a> <img src="[% constants.imagedir %]/eof.gif" alt="eof">				</td>
				<td>	[% people_select.eof %]		</td>
			</tr>
		</table>

		<p><b><a name="people_bonus_anonymous">Anonymous Modifier</a></b> (modifier assigned to anonymous posts)<br>
		[% people_select.anonymous %]<br>

		<p><b><a name="karma_bonus">Karma Bonus</a></b> (modifier assigned to posts where the user has good karma)<br>
		[% karma_bonus %]<br>

		<p><b><a name="subscriber_bonus">Subscriber Bonus</a></b> (modifier assigned to posts where the user was a subscriber)<br>
		[% subscriber_bonus %]<br>

		<p><b><a name="new_user_bonus">New User Modifier</a></b> (assign modifiers to recently created accounts)<br>
		[% new_user_percent_select %]% (new users in the last X percentage of the userbase)<br>
		[% new_user_bonus_select %] (modifier assigned to new user posts)<br>

		<label>Comment Limit <input type="text" name="commentlimit" size="6" value="[% user_edit.commentlimit %]"></label>
		<div class="notes">Only display this many comments, for best results, set this to a low number and sort by score) If set above [% constants.breaking %], then it is ignored and [% constants.breaking / 2 %] is used instead.</div>

		<label>Comment Byte Limit [% bytelimit_select %]</label>
		[% PROCESS formNote note="Number of bytes of comments to display. If this is reached before comment limit, break the page, else use above comment limit." %]

		<label>Index Spill <input type="text" name="commentspill" value="[% user_edit.commentspill %]" size="3"></label>
		[% PROCESS formNote note="When an article has this many comments, it switches to indexed mode." %]

		<p><b><a name="clsmall">Small Comment Modifier</a></b> (Modifier assigned to smaller comments)<br>
		<input type="text" name="clsmall" value="[% user_edit.clsmall %]" size="6"> (length of comment in bytes)<br>
		[% small_length_bonus_select %] (modifier assigned)<br>

		<p><b><a name="clbig">Long Comment Modifier</a></b> (Modifier assigned to lengthy comments)<br>
		<input type="text" name="clbig" value="[% user_edit.clbig %]" size="6"> (length of comment in bytes)<br>
		[% long_length_bonus_select %] (modifier assigned)<br>

		<label>Max Comment Size <input type="text" name="maxcommentsize" size="6" value="[% user_edit.maxcommentsize %]"></label>
		[% PROCESS formNote note='Truncates long comments, and adds a "Read the rest" link.  Set really big to disable.' %]

		<label>Comment Box Size</label>
		Columns: <input type="text" name="textarea_cols" size="4" value="[% user_edit.textarea_cols || constants.textarea_cols %]">
		Rows: <input type="text" name="textarea_rows" size="4" value="[% user_edit.textarea_rows || constants.textarea_rows %]">
		[% PROCESS formNote note="Also applies to other large text boxes" %]

		<label>Comment Post Mode</label>
		[% posttype_select %]

[% IF user.karma > constants.goodkarma %]
		<label>No Karma Bonus
		<input type="hidden" name="nobonus_present" value="1">
		<input type="checkbox" name="nobonus"[% b_check %]>
		</label>
[% END %]

[% IF user.is_subscriber %]
		<label>No Subscriber Bonus
		<input type="hidden" name="nosubscriberbonus_present" value="1">
		<input type="checkbox" name="nosubscriberbonus"[% sb_check %]>
		</label>
[% END %]

[% IF constants.allow_anonymous && (user.karma > -1 || p_check) %]
		<label>Post Anonymously
		<input type="hidden" name="postanon_present" value="1">
		<input type="checkbox" name="postanon"[% p_check %]>
		</label>
[% END %]


[% UNLESS user_edit.domaintags.defined; user_edit.domaintags=2; END %]
[% domaintags.${user_edit.domaintags} = constants.markup_checked_attribute -%]
		<p><b>Display Link Domains?</b> (shows the actual domain of any link in brackets)<br>
		<blockquote><div>
		<input type="radio" name="domaintags" [% domaintags.0 %] value=0> Never show link domains<br>
		<input type="radio" name="domaintags" [% domaintags.1 %] value=1> Show the links domain only in recommended situations<br>
		<input type="radio" name="domaintags" [% domaintags.2 %] value=2> Always show link domains
		</div></blockquote>
		<label>User Page Comment Listing</label>
		<blockquote><div>
		[% UNLESS user_edit.user_comment_sort_type.defined; user_edit.user_comment_sort_type=2; END %]
		[% user_comment_sort_type.${user_edit.user_comment_sort_type} = constants.markup_checked_attribute -%]
		<input type="radio" name="user_comment_sort_type"[% user_comment_sort_type.1 %] value="1"> Selected by create time descending<br>
		<input type="radio" name="user_comment_sort_type"[% user_comment_sort_type.2 %] value="2"> Selected by create time descending, results grouped by discussion, newest discussion first.
		</div></blockquote>
		[% IF user.is_admin %]
		<label>Show Moderations in User Comment Listing <input type="checkbox" name="mod_with_comm" [% s_mod_check %]></label>
			[% IF constants.m2 %]
				<label>Show Metamoderation in User Moderation Listing <input type="checkbox" name="m2_with_mod" [% s_m2_check %]></label>
				<label>Show Metamoderation in Comment Moderation Listing <input type="checkbox" name="m2_with_mod_on_comm" [% s_m2c_check %]></label>
			[% END %]
		[% END %]
		</td>
	</tr>
</table>
<p>
<input type="submit" value="Save"> <input type="submit" name="restore_defaults" value="Restore Defaults">
</fieldset>
</form>
</div>
</div>
__seclev__
500
__version__
$Id$
