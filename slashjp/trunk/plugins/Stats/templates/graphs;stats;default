__section__
default
__description__

__title__

__page__
stats
__lang__
en_US
__name__
graphs
__template__
[% 

form.stats_days = form.stats_days || 1;
byweekavg = 0;
showtotal = 0;

mygraphs = [
	'Pages',
	'Hits',
	'Total Users',
	'Comments',
	'Page Bytes',
	'Total Bytes',
	'Section Pages',
	'Section Bytes',

	'Message Types',

	'Comment Scores',
	'Total Comments',
	'Total Comments By Source',
	'Comment IPIDs',
	'Total Moderations',
	'Total Metamoderations',

        'New Subscriptions',
        'Total Subscribers',
        'Total Renewing Subscribers',
        'Subscriber Pages'
];


SWITCH gtitle;

  # Main Report
  CASE 'Pages';
  extra_pages = [];
  CALL extra_pages.splice(0, 0, constants.op_extras_countdaily);
  
  page_plugin = Slash.getObject('Slash::Page');
  IF page_plugin;
  	extra_pages.push("page");
  END;

  all_pages = ['total','index_page', 'comments_page', 'article_page'];
  section_pages = ['index_page', 'comments_page', 'article_page'];
  
  FOREACH cur_page = extra_pages;
	all_pages.push("${cur_page}_page");
	section_pages.push("${cur_page}_page");
  END;

  IF (form.stats_section && form.stats_section != 'all');
      PROCESS make_graph
         showtotal => 1,
         section   => form.stats_section,
         type      => 'areastacked',
         statdata  => section_pages;
  ELSE;
      PROCESS make_graph
         section   => 'all',
         type      => 'areastackedindex',
         statdata  => all_pages;
  END;

  CASE 'Hits';
  IF (form.stats_section && form.stats_section != 'all');
      %] <B>[% gtitle %]</B> graph for [% form.stats_section %] is unavailable.
	Try the <B>Pages</B> graph instead.
     [%
#      PROCESS make_graph
#         showtotal => 1,
#         section   => form.stats_section,
#         type      => 'areastacked',
#         statdata  => ['rss_page', 'palm_page'];
  ELSE;
      PROCESS make_graph
         section   => 'all',
         type      => 'areastackedindex',
         statdata  => ['grand_total', 'rss_page', 'palm_page'];
  END;

  CASE 'Total Users';
  IF (form.stats_section && form.stats_section != 'all');
      PROCESS make_graph
         section   => form.stats_section,
         type      => 'area',
         statdata  => ['ipids', 'users', 'users_subscriber'];
  ELSE;
      PROCESS make_graph
         section   => 'all',
         type      => 'area',
         statdata  => [['unique', '', 'ipids'],
                      ['unique_users', '', 'users']
                      ['users_subscriber', '', 'users_subscriber']
                     ];
  END;

  CASE 'Comments';
      PROCESS make_graph
         section   => form.stats_section || 'all',
         type      => 'area',
         statdata  => ['comments'];

  CASE 'Page Bytes';
  IF (form.stats_section && form.stats_section != 'all');
      PROCESS make_graph
         showtotal => 1,
         section   => form.stats_section,
         type      => 'areastacked',
         statdata  => ['index_bytes', 'article_bytes', 'comments_bytes'];
  ELSE;
      PROCESS make_graph
         section   => 'all',
         type      => 'areastackedindex',
         statdata  => ['total_bytes', 'index_bytes', 'article_bytes', 'comments_bytes'];
  END;

  CASE 'Total Bytes';
  IF (form.stats_section && form.stats_section != 'all');
      PROCESS make_graph
         showtotal => 1,
         section   => form.stats_section,
         type      => 'areastacked',
         statdata  => ['index_bytes', 'article_bytes', 'comments_bytes', 'rss_bytes', 'palm_bytes'];
  ELSE;
      PROCESS make_graph
         section   => 'all',
         type      => 'areastackedindex',
         statdata  => ['grand_total_bytes', 'index_bytes', 'article_bytes', 'comments_bytes', 'rss_bytes', 'palm_bytes'];
  END;

  CASE 'Section Pages';
      avail_sections = Slash.db.getDescriptions('sections');
      sect_page = [];
      FOREACH section = avail_sections.keys.sort;
         sect_page.push(['page', section]);
      END;
      PROCESS make_graph
         type      => 'lines',
         statdata  => sect_page;

  CASE 'Section Bytes';
      avail_sections = Slash.db.getDescriptions('sections');
      sect_byte = [];
      FOREACH section = avail_sections.keys.sort;
         sect_byte.push(['bytes', section]);
      END;
      PROCESS make_graph
         type      => 'lines',
         statdata  => sect_byte;


  # Messages Report
  CASE 'Message Types';
      stats = Slash.getObject('Slash::Stats');
      section => 'all';

      stats_data_big = stats.getAllStats({ section => section, days => 1}).${section};
      stats_data_key = stats_data_big.keys.sort.0;
      stats_data = stats_data_big.${stats_data_key};

      messages = Slash.getObject('Slash::Messages');
      codes = messages.getDescriptions("messagecodes");
      modes = messages.getDescriptions("deliverymodes");

      statdata = [];
      FOR code = codes.keys.nsort;
         # skip essentially unused modes 6, 8, 11 for Slashdot
         NEXT IF code == 6 || code == 8 || code == 11;
         statdata.push(["msg_$code", "", codes.$code]);
      END;

      PROCESS make_graph
         showtotal => 1,
         type      => 'areastacked'; 

  # Moderation Report
  CASE 'Comment Scores';
      PROCESS make_graph
         showtotal => 1,
         section   => 'all',
         type      => 'areastacked',
         statdata  => ['comments_score_5', 'comments_score_4', 'comments_score_3', 'comments_score_2', 'comments_score_1', 'comments_score_0', 'comments_score_-1'];

  CASE 'Total Comments';
      PROCESS make_graph
         section   => 'all',
         type      => 'area',
         statdata  => ['comments'];

  CASE 'Total Comments By Source';
      PROCESS make_graph
         section   => 'all',
         type      => 'areastacked',
         statdata  => ['comments_ipids_anononly', 'comments_ipids_loggedinonly', 'comments_ipids_anonandloggedin', 'comments_proxyanon'];

  CASE 'Comment IPIDs';
      PROCESS make_graph
         showtotal => 1,
         section   => 'all',
         type      => 'areastacked',
         statdata  => ['distinct_comment_ipids_anononly', 'distinct_comment_ipids_loggedinonly', 'distinct_comment_ipids_anonandloggedin'];

  CASE 'Total Moderations';
      PROCESS make_graph
         section   => 'all',
         type      => 'area',
         statdata  => ['m1_up_total', 'm1_down_total'];

  CASE 'Total Metamoderations';
      PROCESS make_graph
         section   => 'all',
         type      => 'area',
         statdata  => ['m2_fair_total', 'm2_unfair_total'];


  # Subscription Report
  CASE 'New Subscriptions';
      PROCESS make_graph
         showtotal => 1,
         section   => 'all',
         type      => 'areastacked',
         statdata  => ['subscribe_new_users', 'subscribe_renew_users'];

  CASE 'Total Subscribers';
      PROCESS make_graph
         byweekavg => 1,
         section   => 'all',
         type      => 'area',
         statdata  => ['subscribers_total', 'subscribers_current'];

  CASE 'Total Renewing Subscribers';
      PROCESS make_graph
         byweekavg => 1,
         section   => 'all',
         type      => 'area',
         statdata  => ['subscribers_renewing_total', 'subscribers_renewing_current'];

  CASE 'Subscriber Pages';
      PROCESS make_graph
         section   => 'all',
         type      => 'area',
         statdata  => ['total_subscriber', 'subscribe_hits_bought', 'total_secure'];


  # default
  CASE;
      "";

END %]

__seclev__
1000
__version__
$Id$
