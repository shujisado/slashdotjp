# This code is a part of Slash, and is released under the GPL.
# Copyright 1997-2004 by Open Source Development Network. See README
# and COPYING for more information, or see http://slashcode.com/.
# $Id$

##
##  Makefile -- Current one for Slash
##

#   the used tools
VERSION = 1.1.6-bender
DISTNAME = slash
DISTVNAME = $(DISTNAME)-$(VERSION)

SHELL = /bin/sh
PERL = perl
NOOP = $(SHELL) -c true
RM_RF = rm -rf
RM = rm -f
SUFFIX = .gz
COMPRESS = gzip --best
TAR  = tar
TARFLAGS = cvf
PREOP = @$(NOOP)
POSTOP = @$(NOOP)
TO_UNIX = @$(NOOP)
SLASH_PREFIX = /usr/local/slash
# If this isn't used anymore, can we remove it?
INIT = /etc
USER = nobody
GROUP = nobody
CP = cp

# Plugins (any directory in plugins/)
PLUGINS = `find . -name CVS -prune -o -type d -maxdepth 1 -print`

# Perl scripts, grouped by directory.
BINFILES = `find bin -name CVS -prune -o -type f -print`
SBINFILES = `find sbin -name CVS -prune -o -type f -print`
THEMEFILES = `find themes -name CVS -prune -o -name \*.pl -print`
PLUGINFILES = `find plugins -name CVS -prune -o -name \*.pl -print`

# What do we use to invoke perl?
REPLACEWITH = `$(PERL) -MConfig -e 'print $$Config{startperl}' | sed 's/@/\\@/g'`

# Scripts that need special treatment for $(SLASH_PREFIX)
PREFIX_REPLACE_FILES = utils/slash httpd/slash.conf

# Used by the RPM build.
BUILDROOT=/var/tmp/slash-buildroot
INSTALLSITEARCH=`$(PERL) -MConfig -e 'print "$(BUILDROOT)/$$Config{installsitearch}"'`
INSTALLSITELIB=`$(PERL) -MConfig -e 'print "$(BUILDROOT)/$$Config{installsitelib}"'`
INSTALLMAN3DIR=`$(PERL) -MConfig -e 'print "$(BUILDROOT)/$$Config{installman3dir}"'`

#   install the shared object file into Apache 
# We should run a script on the binaries to get the right
# version of perl. 
# I should also grab an install-sh instead of using $(CP)
slash:
	if ! [ $(RPM) ] ; then \
		(cd Slash; $(PERL) Makefile.PL; make); \
	else \
		(cd Slash; $(PERL) Makefile.PL INSTALLSITEARCH=$(INSTALLSITEARCH) INSTALLSITELIB=$(INSTALLSITELIB) INSTALLMAN3DIR=$(INSTALLMAN3DIR); make); \
	fi

plugins: 
	(cd plugins; \
	 for a in $(PLUGINS); do \
	 	(cd $$a; \
		 if [ -f Makefile.PL ]; then \
		 	if ! [ $(RPM) ] ; then \
				$(PERL) Makefile.PL; make;\
			else \
				$(PERL) Makefile.PL INSTALLSITEARCH=$(INSTALLSITEARCH) INSTALLSITELIB=$(INSTALLSITELIB) INSTALLMAN3DIR=$(INSTALLMAN3DIR); make; \
			fi
		 fi);
	fi)

all: install

install: slash plugins
# Need to toss in a script here that will fix prefix so
# that if someone wants to install in a different
# directory it will be easy
	# Lets go install the libraries, remember to clean out old versions.
	(cd Slash; make install UNINST=1)
	# Lets go install the plugin's libraries
	#
	# If 'plugins' is already a dependency, why do we need to regenerate the
	# Makefile? - Cliff
	(cd plugins; \
	 for a in $(PLUGINS); do \
	 	(cd $$a; \
	 	if [ -f Makefile ]; then \
			make install; \
		elif [ -f Makefile.PL ]; then \
			if ! [ $(RPM) ] ; then \
				$(PERL) Makefile.PL; \
			else \
				$(PERL) Makefile.PL INSTALLSITEARCH=$(INSTALLSITEARCH) INSTALLSITELIB=$(INSTALLSITELIB) INSTALLMAN3DIR=$(INSTALLMAN3DIR); \
			fi; \
			make install; \
		fi); \
	done)

	# Create all necessary directories.
	install -d $(SLASH_PREFIX)/bin/ $(SLASH_PREFIX)/sbin $(SLASH_PREFIX)/sql/ $(SLASH_PREFIX)/sql/mysql/ $(SLASH_PREFIX)/sql/postgresql $(SLASH_PREFIX)/themes/ $(SLASH_PREFIX)/themes/slashcode/htdocs/ $(SLASH_PREFIX)/themes/slashcode/sql/ $(SLASH_PREFIX)/themes/slashcode/sql/postgresql $(SLASH_PREFIX)/themes/slashcode/sql/mysql $(SLASH_PREFIX)/themes/slashcode/backup $(SLASH_PREFIX)/themes/slashcode/logs/ $(SLASH_PREFIX)/plugins/ $(SLASH_PREFIX)/httpd/
	
	# Insure we use the proper perl interpreter and prefix in all scripts that 
	# we install. Note the use of Perl as opposed to dirname(1) and basename(1)
	# which may or may not exist on any given system.
	(replacewith=$(REPLACEWITH); \
	 binfiles=$(BINFILES); \
	 sbinfiles=$(SBINFILES); \
	 themefiles=$(THEMEFILES); \
	 pluginfiles=$(PLUGINFILES); \
	 if [ "$$replacewith" != "#!/usr/bin/perl" ]; then \
	 	replace=1; \
		replacestr='(using $(PERL))'; \
	 else \
	 	replace=0; \
	 fi; \
	 for f in $$binfiles $$sbinfiles $$themefiles $$pluginfiles; do \
	 	if [ $$replace ]; then \
			b=`echo $$f | $(PERL) -MFile::Basename -e 'print basename(<STDIN>)'`; \
			d=`echo $$f | $(PERL) -MFile::Basename -e 'print dirname(<STDIN>)'`; \
			$(PERL) -i.bak -pe "s@#!/usr/bin/perl@$$replacewith@ if $$. == 1" $$f; \
		fi; \
		echo "Installing '$$f' in $(SLASH_PREFIX)/$$d $$replacestr"; \
		install -d $(SLASH_PREFIX)/$$d; \
		install $$f $(SLASH_PREFIX)/$$d/$$b; \
		if [ -f "$$f.bak" ]; then \
			rm $$f; mv $$f.bak $$f; \
		fi; \
	done)

	$(CP) sql/mysql/slashschema_create.sql $(SLASH_PREFIX)/sql/mysql/schema.sql
	$(CP) sql/postgresql/slashschema_create.sql $(SLASH_PREFIX)/sql/postgresql/schema.sql

	# Note the use of -u in the copy commands below. We don't want to
	# overwrite any of the perl scritps we've already modified and put
	# into place!

	# Now for the plugins.
	(cd plugins; make clean) 
	$(CP) -ruv plugins/* $(SLASH_PREFIX)/plugins/
	# Now all other themes
	$(CP) -ruv themes/* $(SLASH_PREFIX)/themes

	# This needs BSD support (and Solaris)...
	# ... and the $(SLASH_PREFIX) section is a really ugly hack, too.
	(if [ "$(SLASH_PREFIX)" != "/usr/local/slash" ]; then			\
		replace=1;							\
	 fi;									\
	 for a in $(PREFIX_REPLACE_FILES); do 					\
	 	if [ $$replace ]; then						\
			perl -i.bak -pe 's{/usr/local/slash}{$(SLASH_PREFIX)}' $$a;	\
		fi;								\
		case "$$a" in							\
	 	'utils/slash')							\
			 if [ "$(INIT)" != "/etc" ]; then			\
			 	if [ -d $(INIT) ]; then 		\
			 		init=$(INIT);				\
				fi;								\
			 elif [ -d /etc/init.d ]; then 				\
	 			init=/etc;					\
			 elif [ -d /etc/rc.d/init.d ]; then 			\
		 		init=/etc/rc.d;					\
			 fi;							\
			 if [ $$init ]; then					\
 			 	install utils/slash $$init/init.d/;		\
				ln -s -f ../init.d/slash $$init/rc3.d/S99slash;	\
				ln -s -f ../init.d/slash $$init/rc6.d/K99slash;	\
			 else 							\
				echo "*** Makefile can't determine where your init scripts live."; \
				if [ $$init ]; then				\
					echo "***   ('$(INIT)' does not exist)";	\
				fi;						\
				echo "*** You will need to look at how to install utils/slashd"; \
				echo "*** on your own.";			\
			 fi;							\
			 ;;							\
		'httpd/slash.conf')						\
			if [ -f $(SLASH_PREFIX)/httpd/slash.conf ]; then	\
				echo "Preserving old slash.conf"; 		\
			else 							\
				$(CP) httpd/slash.conf $(SLASH_PREFIX)/httpd/slash.conf; \
			fi;							\
			$(CP) httpd/slash.conf $(SLASH_PREFIX)/httpd/slash.conf.def; \
			;;							\
		*)								\
			install $$a $(SLASH_PREFIX)/$$a				\
			;;							\
		esac;								\
		if [ $$replace ]; then						\
	 		mv $$a.bak $$a;	 					\
		fi;								\
	done)

	touch $(SLASH_PREFIX)/slash.sites
	chown $(USER):$(GROUP) $(SLASH_PREFIX)
	chown -R $(USER):$(GROUP) $(SLASH_PREFIX)/themes
	chown -R $(USER):$(GROUP) $(SLASH_PREFIX)/sbin
	chown -R $(USER):$(GROUP) $(SLASH_PREFIX)/bin
	chown -R $(USER):$(GROUP) $(SLASH_PREFIX)/sql
	chown -R $(USER):$(GROUP) $(SLASH_PREFIX)/plugins
# Add a @ to suppress output of the echo's
	@echo "+--------------------------------------------------------+"; \
	echo "| All done.                                              |"; \
	echo "| If you want to let Slash handle your httpd.conf file   |"; \
	echo "| go add:                                                |"; \
	echo "|                                                        |"; \
	echo "| Include $(SLASH_PREFIX)/httpd/slash.conf              |"; \
	echo "|                                                        |"; \
	echo "| to your httpd.conf for apache.                         |"; \
	echo "| If not, cat its content into your httpd.conf file.     |"; \
	echo "|                                                        |"; \
	echo "| Thanks for installing Slash.                           |"; \
	echo "+--------------------------------------------------------+"; \


reload: install
	apachectl stop
	apachectl start
#   cleanup
clean:

dist: $(DISTVNAME).tar$(SUFFIX)

$(DISTVNAME).tar$(SUFFIX) : distdir
	$(PREOP)
	$(TO_UNIX)
	$(TAR) $(TARFLAGS) $(DISTVNAME).tar $(DISTVNAME)
	$(RM_RF) $(DISTVNAME)
	$(COMPRESS) $(DISTVNAME).tar
	$(POSTOP)

distdir :
	$(RM_RF) $(DISTVNAME)
	$(PERL) -MExtUtils::Manifest=manicopy,maniread \
	-e "manicopy(maniread(),'$(DISTVNAME)', '$(DIST_CP)');"

manifest :
	(cd Slash; make distclean)
	$(PERL) -MExtUtils::Manifest -e 'ExtUtils::Manifest::mkmanifest'

rpm :
	rpm -ba slash.spec

