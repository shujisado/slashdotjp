__section__
default
__description__
date line with pop-up calendar
  id          = id you want assigned to the outer html element
  start_mode  = (optional) one of 'now', 'day', or 'all'
  date        = (optional) a string to be interprested by js Date(), initial selected day in the calendar
  init        = (optional) name of the js function you want called after the date widget has been constructed
  peer        = (optional) id of an existing date widget which this widget must mirror, mutually exclusive to (start_mode, date)
__title__
Date Widget
__page__
misc
__lang__
en_US
__name__
datewidget
__template__
[% IF !start_mode; start_mode = "now"; END %]
<div id="[% id %]" class="date-widget [% start_mode %]">
<div class="date-tab-bar">
  <select class="date-span-popup" onChange="this._widget.handleRangePopupSelect(this)">
    <option value="now" [% IF start_mode=="now" %]selected[% END %]>Latest Content</option>
    <option value="day" class="day-label" [% IF start_mode=="day" %]selected[% END %]>Day of</option>
    <option value="all" [% IF start_mode=="all" %]selected[% END %]>Search Archives</option>
  </select>
  <span class="day date-tab" onClick="this._widget.handleDateTabClick()"><div class="tab-button"></div></span>
</div>
<div id="[% id %]-calendar-pane" class="calendar-pane"></div>
</div>
<script type="text/javascript">
  YAHOO.util.Event.addListener(window, "load", function(){ attachDateWidgetTo({id:"[% id %]", [% IF peer; %]peer:"[% peer %]"[% ELSE %]mode:"[% start_mode %]"[% IF date; %], date:new Date("[% date %]")[% END %][% END %][% IF init; %], init:[% init; END %]}); });
</script>
__seclev__
10000
__version__
$Id$
