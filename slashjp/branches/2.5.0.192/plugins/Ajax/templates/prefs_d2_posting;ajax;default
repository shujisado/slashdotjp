__section__
default
__description__
__title__

__page__
ajax
__lang__
en_US
__name__
prefs_d2_posting
__template__

[% hi = constants.comment_maxscore - constants.comment_minscore %]
[% lo = '-' _ hi %]
[% range = [ lo .. hi ] %]

                [% IF tabbed == 1 %]
                <div style="text-align: center;">
                &nbsp;
                <span style="font-weight: bold; text-decoration: none; font-size: 14px; color: #ccc">Posting</span>
                &nbsp;|&nbsp;
                <a href="" style="font-weight: bold; text-decoration: none; font-size: 14px;" onclick="getModalPrefs('d2', 'Discussion 2', 1); return false;">Viewing</a>
                </div>
                [% END %]

<form id ="modal_prefs" method="post">

<input type="hidden" name="formname" value="d2_posting">
<input type="hidden" name="uid" value="[% user.uid %]">

<table width="100%">
        <tr>
        <td valign="middle">
        &nbsp;<p>

        <b>Email Display</b>
        (currently
        [%- IF !user.fakeemail; " not displayed";
        ELSE; ": <tt>"; user.fakeemail | strip_literal; "</tt>";
        END %])<br>
        [% IF !user.emaildisplay.defined;
                IF user.fakeemail %]
                <i>(Your current email address was apparently set before
                users' email addresses were forced to one of the below
                choices. Please pick one and click Save.)</i><br>
                [% END;
                user.emaildisplay = 0;
        END;
        IF user.emaildisplay.defined;
                emaildisplay.${user.emaildisplay} = constants.markup_checked_attribute;
        END %]
        <blockquote><div>
        <input type="radio" name="emaildisplay" [% emaildisplay.0 %] value=0> Do not display an e-mail address.<br>
        <input type="radio" name="emaildisplay" [% emaildisplay.1 %] value=1> Show your email address with weekly updating spam armoring.<br>
        <input type="radio" name="emaildisplay" [% emaildisplay.2 %] value=2> Show your real email address without cowering behind childish anonymity or obfuscation.
        </div></blockquote>

        [% IF user.karma > constants.goodkarma;
                b_check = '';
                IF user.nobonus;
                        b_check = constants.markup_checked_attribute;
                END %]
                <input type="hidden" name="nobonus_present" value="1">
                <b><input type="checkbox" name="nobonus"[% b_check %]>&nbsp;No Karma Bonus</b><a href="#" onclick="displayModalPrefHelp('modalprefhelp_karma');" style="text-decoration: none;">[?]</a>
                <br>
                <div id="modalprefhelp_karma" class="modalprefhelp" style="display: none;">
                        Normally users with high karma post at Score: 2, but you can choose to post down in the Score: 1 gutters with the rest of the user population with this option.
                </div>

        [% END %]

        [% IF user.is_subscriber;
                sb_check = '';
                IF user.nosubscriberbonus;
                        sb_check = constants.markup_checked_attribute;
                END %]
                <input type="hidden" name="nosubscriberbonus_present" value="1">
                <b><input type="checkbox" name="nosubscriberbonus"[% sb_check %]>&nbsp;No Subscriber Bonus</b>&nbsp;<a href="#" onclick="displayModalPrefHelp('modalprefhelp_subscriber');" style="text-decoration: none;">[?]</a>
                <br>
                <div id="modalprefhelp_subscriber" class="modalprefhelp" style="display: none;">
                        Our paying subscribers are allowed to post at Score: 2, but if you think that this is unnecessary, then you can turn it off.
                </div>

        [% END %]

        <b>Comment Box Size</b>&nbsp;<a href="#" onclick="displayModalPrefHelp('modalprefhelp_textarea');" style="text-decoration: none;">[?]</a>
        <br>
        <div id="modalprefhelp_textarea" class="modalprefhelp" style="display: none;">
                Also applies to other large text boxes.
        </div>

        [% textarea_cols = constants.textarea_cols;
        IF user.textarea_cols;
                textarea_cols = user.textarea_cols;
        END;

        textarea_rows = constants.textarea_rows;
        IF user.textarea_rows;
                textarea_rows = user.textarea_rows;
        END %]

        Columns: <input type="text" name="textarea_cols" size="4" value="[% user.textarea_cols || constants.textarea_cols %]">
        Rows: <input type="text" name="textarea_rows" size="4" value="[% user.textarea_rows || constants.textarea_rows %]">

        <br><br>

        <b>Comment Post Mode</b>&nbsp;<a href="#" onclick="displayModalPrefHelp('modalprefhelp_postmode');" style="text-decoration: none;">[?]</a>
        <br>
        <div id="modalprefhelp_postmode" class="modalprefhelp" style="display: none;">
                Posting modes determine how the text that you enter for a comment is interpreted and thus how it will be displayed to the reader. The posting modes are:<br>
                <b>HTML Formatted:</b> You determine the formatting, using allowed HTML tags and entities.<br>
                <b>Plain Old Text:</b> Same as "HTML Formatted", except that &lt;BR&gt; is automatically inserted for newlines, and other whitespace is converted to non-breaking spaces in a more-or-less intelligent way.<br>
                <b>Extrans:</b> Same as "Plain Old Text", except that & and &lt; and &gt; are converted to entities (no HTML markup allowed).<br>
                <b>Code:</b> Same as "Extrans", but a monospace font is used, and a best attempt is made at performing proper indentation.
        </div>
        [%
        formats = Slash.db.getDescriptions('postmodes');
        Slash.createSelect('posttype', formats, user.posttype, 1);
        %]

        </td>
        </tr>
</table>
&nbsp;<p>
<input type="button" value="Save" onclick="saveModalPrefs()">
</form>
__seclev__
500
__version__
$Id$
